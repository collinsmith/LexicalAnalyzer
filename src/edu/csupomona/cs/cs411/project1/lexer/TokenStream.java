package edu.csupomona.cs.cs411.project1.lexer;

import java.io.Reader;

/**
 * This class represents a stream of tokens, similar to an iterator. The
 * difference lies in that a token stream will not generate the next token
 * until explicitly asked for.
 *
 * @author Collin Smith <collinsmith@csupomona.edu>
 */
public class TokenStream {
	/**
	 * This field represents the {@link Lexer} associated with this
	 * TokenStream.
	 */
	private final Lexer<Token> LEXER;

	/**
	 * This field represents the {@link Reader} associated with this
	 * TokenStream.
	 */
	private final Reader READER;

	/**
	 * This field stores the next token found within this TokenStream. The
	 * use of this variable is to allow for the use of the {@link #peek()}
	 * method.
	 *
	 * @see #peek()
	 */
	private Token nextToken;

	/**
	 * This constructor creates a TokenStream using the specified
	 * {@link Lexer} and {@link Reader} as parameters.
	 *
	 * @param l Lexer to use to generate Tokens
	 * @param r Reader to generated Tokens from
	 */
	TokenStream(Lexer<Token> l, Reader r) {
		this.LEXER = l;
		this.READER = r;
	}

	/**
	 * Returns whether or not there are more tokens within this TokenStream.
	 *
	 * @return {@code true} if there are more tokens, otherwise {@code false}
	 */
	public boolean hasMore() {
		return peek() != null;
	}

	/**
	 * Returns the next token contained within this TokenStream without
	 * stepping the reader forward.
	 *
	 * @return the next token that will be generated by this TokenStream
	 */
	public Token peek() {
		if (nextToken != null) {
			return nextToken;
		}

		nextToken = LEXER.next(READER);
		return nextToken;
	}

	/**
	 * Returns the next token contained within this TokenStream and steps the
	 * reader forward.
	 *
	 * @return the next token generated by this TokenStream
	 */
	public Token next() {
		if (nextToken != null) {
			Token t = nextToken;
			nextToken = null;
			return t;
		}

		return LEXER.next(READER);
	}
}
